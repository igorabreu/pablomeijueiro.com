{"version":3,"sources":["assets/images/icon1.svg","assets/images/icon2.svg","assets/images/icon3.svg","assets/images/icon4.svg","_settings/global-style.js","_settings/style-theme.js","pages/Home/styles.js","pages/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","GlobalStyle","createGlobalStyle","_templateObject","theme","color","darkBlue","font","functions","responsive","value1","value2","width1","arguments","length","undefined","width2","a","decimalRound","b","concat","num","places","power","Math","pow","round","HomeWrapper","styled","div","styles_templateObject","props","IconMenu","img","_templateObject2","TopBar","_templateObject3","BottomBar","_templateObject4","Home","react_default","createElement","src","iconLeftTop","iconRightTop","iconLeftBottom","iconRightBottom","App","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","styled_components_browser_esm","Fragment","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uZCEjC,IAAMC,EAAcC,YAAHC,KCFXC,EAAQ,CACnBC,MAAO,CACLC,SAAU,WAEZC,KAAM,GACNC,UAAW,CACTC,WAAY,SAACC,EAAQC,GAAwC,IAAhCC,EAAgCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAvB,IAAKG,EAAkBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAT,KAC5CI,EAAIC,EAAc,KAAOP,EAASD,IAAYM,EAASJ,GAAS,GAChEO,EAAID,GACPF,EAASN,EAASE,EAASD,IAAWK,EAASJ,GAChD,GAEF,cAAAQ,OAAeH,EAAf,SAAAG,OAAwBD,EAAxB,UAKN,SAASD,EAAaG,EAAKC,GACzB,IAAMC,EAAQC,KAAKC,IAAI,GAAIH,GAC3B,OAAOE,KAAKE,MAAML,EAAME,GAASA,s6BCjB5B,IAAMI,EAAcC,IAAOC,IAAVC,IAGF,SAAAC,GAAK,OAAIA,EAAM3B,MAAMC,MAAMC,WAEpC0B,EAAWJ,IAAOK,IAAVC,KAMRC,EAASP,IAAOC,IAAVO,KAaNC,EAAYT,IAAOC,IAAVS,KCJPC,EAfF,WACX,OACEC,EAAAvB,EAAAwB,cAACd,EAAD,KACEa,EAAAvB,EAAAwB,cAACN,EAAD,KACEK,EAAAvB,EAAAwB,cAACT,EAAD,CAAUU,IAAKC,MACfH,EAAAvB,EAAAwB,cAACT,EAAD,CAAUU,IAAKE,OAEjBJ,EAAAvB,EAAAwB,cAACJ,EAAD,KACEG,EAAAvB,EAAAwB,cAACT,EAAD,CAAUU,IAAKG,MACfL,EAAAvB,EAAAwB,cAACT,EAAD,CAAUU,IAAKI,SCFRC,EAVH,WACV,OACEP,EAAAvB,EAAAwB,cAACO,EAAA,EAAD,KACER,EAAAvB,EAAAwB,cAACQ,EAAA,EAAD,KACET,EAAAvB,EAAAwB,cAACQ,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWb,OCIrBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACPnB,EAAAvB,EAAAwB,cAACmB,EAAA,EAAD,CAAexD,MAAOA,GACpBoC,EAAAvB,EAAAwB,cAACD,EAAAvB,EAAM4C,SAAP,KACErB,EAAAvB,EAAAwB,cAACxC,EAAD,MACAuC,EAAAvB,EAAAwB,cAACqB,EAAD,QAIJC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.57205c1a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon1.b1335f1e.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon2.22365d5b.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon3.0c6b7c11.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon4.5285aa24.svg\";","import { createGlobalStyle } from \"styled-components\"\n\nexport const GlobalStyle = createGlobalStyle`\n  body,\n  html {\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  #root {\n    margin: 0;\n    padding: 0;\n    height: 100%;\n  }\n`\n","export const theme = {\n  color: {\n    darkBlue: \"#0c3551\"\n  },\n  font: {},\n  functions: {\n    responsive: (value1, value2, width1 = 320, width2 = 1440) => {\n      const a = decimalRound((100 * (value2 - value1)) / (width2 - width1), 3)\n      const b = decimalRound(\n        (width2 * value1 - width1 * value2) / (width2 - width1),\n        1\n      )\n      return `calc(${a}vw + ${b}px)`\n    }\n  }\n}\n\nfunction decimalRound(num, places) {\n  const power = Math.pow(10, places)\n  return Math.round(num * power) / power\n}\n","import styled from \"styled-components\"\n\nexport const HomeWrapper = styled.div`\n  position: relative;\n  height: 100%;\n  background-color: ${props => props.theme.color.darkBlue};\n`\nexport const IconMenu = styled.img`\n  position: relative;\n  max-height: 50px;\n  cursor: pointer;\n`\n\nexport const TopBar = styled.div`\n  display: flex;\n  width: 100%;\n  height: 150px;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  position: absolute;\n  padding: 30px;\n  box-sizing: border-box;\n  top: 0;\n`\n\nexport const BottomBar = styled.div`\n  display: flex;\n  width: 100%;\n  height: 150px;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  position: absolute;\n  padding: 30px;\n  box-sizing: border-box;\n  bottom: 0;\n`\n","import React from \"react\"\nimport iconLeftTop from \"../../assets/images/icon1.svg\"\nimport iconRightTop from \"../../assets/images/icon2.svg\"\nimport iconLeftBottom from \"../../assets/images/icon3.svg\"\nimport iconRightBottom from \"../../assets/images/icon4.svg\"\nimport { HomeWrapper, IconMenu, TopBar, BottomBar } from \"./styles\"\n\nconst Home = () => {\n  return (\n    <HomeWrapper>\n      <TopBar>\n        <IconMenu src={iconLeftTop} />\n        <IconMenu src={iconRightTop} />\n      </TopBar>\n      <BottomBar>\n        <IconMenu src={iconLeftBottom} />\n        <IconMenu src={iconRightBottom} />\n      </BottomBar>\n    </HomeWrapper>\n  )\n}\n\nexport default Home\n","import React from \"react\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport Home from \"./pages/Home\"\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { ThemeProvider } from \"styled-components\"\nimport { GlobalStyle } from \"../src/_settings/global-style\"\nimport { theme } from \"../src/_settings/style-theme\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <React.Fragment>\n      <GlobalStyle />\n      <App />\n    </React.Fragment>\n  </ThemeProvider>,\n\n  document.getElementById(\"root\")\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}